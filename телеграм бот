from aiogram import Bot, Dispatcher, F, types
import asyncio
from aiogram.filters.command import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    FSInputFile,
    CallbackQuery
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import logging
import os
from typing import Dict, List, Optional
from datetime import datetime
import json
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    API_TOKEN = '7465370955:AAFrGvoyI9UTDYotaFwXG_lh8aGvw_zcEWA'
    ADMIN_IDS = [1217835656] # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    IMAGES_PATH = os.path.join(os.path.dirname(__file__), 'images')
    DELIVERY_TIME = 45  # –º–∏–Ω—É—Ç
    CARD_NUMBER = "1234 5678 9012 3456"
    MAX_CART_ITEMS = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ü—Ü –≤ –∫–æ—Ä–∑–∏–Ω–µ
    MIN_ORDER_AMOUNT = 450  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    SUPPORT_CONTACT = "@support"
    LOG_FILE = "bot.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=Config.API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
os.makedirs(Config.IMAGES_PATH, exist_ok=True)

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
class OrderStatus:
    PENDING = "pending"
    PAID = "paid"
    DELIVERING = "delivering"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class Order:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.items: List[str] = []
        self.total_price: int = 0
        self.order_time: Optional[datetime] = None
        self.status: str = OrderStatus.PENDING
        self.delivery_address: Optional[str] = None

    def add_item(self, item: str) -> bool:
        if len(self.items) >= Config.MAX_CART_ITEMS:
            return False
        self.items.append(item)
        self.total_price += PIZZA_PRICES.get(item, 0)
        return True

    def remove_item(self, index: int) -> bool:
        if 0 <= index < len(self.items):
            item = self.items.pop(index)
            self.total_price -= PIZZA_PRICES.get(item, 0)
            return True
        return False

    def clear(self) -> None:
        self.items.clear()
        self.total_price = 0
        self.order_time = None
        self.status = OrderStatus.PENDING
        self.delivery_address = None

    def confirm_payment(self) -> None:
        self.order_time = datetime.now()
        self.status = OrderStatus.PAID

    def can_checkout(self) -> bool:
        return len(self.items) > 0 and self.total_price >= Config.MIN_ORDER_AMOUNT

    def get_order_summary(self) -> str:
        if not self.items:
            return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        
        items_text = []
        for i, item in enumerate(self.items, 1):
            price = PIZZA_PRICES.get(item, 0)
            items_text.append(f"{i}. {item} - {format_price(price)}")
        
        summary = (
            f"üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
            f"{chr(10).join(items_text)}\n\n"
            f"üì¶ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(self.items)}\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {format_price(self.total_price)}"
        )
        
        if self.status == OrderStatus.PAID:
            summary += f"\n‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {self.order_time.strftime('%d.%m.%Y %H:%M')}"
        
        return summary

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
orders: Dict[int, Order] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
class Buttons:
    CART = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
    CLEAR_CART = 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'
    PAY = 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'
    CONFIRM_PAYMENT = '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'
    RETURN_TO_MENU = 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'
    HELP = '‚ùì –ü–æ–º–æ—â—å'

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–∏—Ü—Ü
pizza_descriptions = {
    "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": '–ü–∏—Ü—Ü–∞ ¬´–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞¬ª ‚Äî —Ç–∏–ø–∏—á–Ω–∞—è –Ω–µ–∞–ø–æ–ª–∏—Ç–∞–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞, c –∏–∑–º–µ–ª—å—á—ë–Ω–Ω—ã–º–∏ –∏ –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –ø–æ–º–∏–¥–æ—Ä–∞–º–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, —Å–≤–µ–∂–∏–º–∏ –ª–∏—Å—Ç—å—è–º–∏ –±–∞–∑–∏–ª–∏–∫–∞ –∏ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º.',
    "–ü–∏—Ü—Ü–∞ 4–°—ã—Ä–∞": '–ü–∏—Ü—Ü–∞ ¬´–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞¬ª ‚Äî —ç—Ç–æ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–∞—è –±–µ–ª–∞—è –ø–∏—Ü—Ü–∞, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ—ë –Ω–µ –∫–ª–∞–¥—É—Ç –ø–æ–º–∏–¥–æ—Ä—ã –∏–ª–∏ —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å. –ù–∞—á–∏–Ω–∫—É –ø–∏—Ü—Ü—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å—ã—Ä: –º—è–≥–∫–∞—è —Ä–∏–∫–æ—Ç—Ç–∞, –ø–ª–∞–≤—è—â–∞—è—Å—è –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–≤—ë—Ä–¥—ã–π –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–∞—Ä–º–µ–∑–∞–Ω –∏ –≥–æ–ª—É–±–∞—è –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞ —Å –ø–ª–µ—Å–µ–Ω—å—é.',
    "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": '–ü–∏—Ü—Ü–∞ ¬´–ü–µ–ø–ø–µ—Ä–æ–Ω–∏¬ª ‚Äì —ç—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∏ –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏. –û–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º —Ö—Ä—É—Å—Ç—è—â–µ–≥–æ —Ç–µ—Å—Ç–∞, –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Ç–æ–º–∞—Ç–Ω–æ–≥–æ —Å–æ—É—Å–∞, –æ–±–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—ã—Ä–∞ –∏ –ø–∏–∫–∞–Ω—Ç–Ω—ã—Ö –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ ‚Äì –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –∫–æ–ª–±–∞—Å–æ–∫ –∏–∑ –æ—Å—Ç—Ä–æ–π —Å–≤–∏–Ω–∏–Ω—ã.',
    "–ü–∏—Ü—Ü–∞ –§–µ–º–±–æ–π—á–∏–∫": '–ü–∏—Ü—Ü–∞ ¬´–§–µ–º–±–æ–π—á–∏–∫¬ª ‚Äì —ç—Ç–æ —Å–º–µ–ª–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤, –±—É–¥–æ—Ä–∞–∂–∞—â–µ–µ —á—É–≤—Å—Ç–≤–∞ –∏ —Ä–∞–∑–∂–∏–≥–∞—é—â–µ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–µ–∂–Ω–∞—è, –∫–∞–∫ –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç, –æ—Å–Ω–æ–≤–∞, —â–µ–¥—Ä–æ —É–∫—Ä—ã—Ç–∞ —Å–ª–∏–≤–æ—á–Ω—ã–º —Å–æ—É—Å–æ–º, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º —à–µ–ø–æ—Ç —Ç–∞–π–Ω—ã. –ù–∞ –Ω–µ–π, —Å–ª–æ–≤–Ω–æ –∏—Å–∫—Ä—ã —é–Ω–æ—Å—Ç–∏, —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –∫—É—Å–æ—á–∫–∏ —Å–æ—á–Ω–æ–π –∫—É—Ä–∏—Ü—ã, –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–∏–∫–∞–Ω—Ç–Ω–æ–º —Å–æ—É—Å–µ —Ç–µ—Ä–∏—è–∫–∏.',
    "–ü–∏—Ü—Ü–∞ –° –ü–µ—Ä—Ü–µ–º –•–∞–ª–∞–ø–µ–Ω—å—é": '–†–∞—Å–∫–∞–ª—ë–Ω–Ω–∞—è –ª–∞–≤–∞, –æ–±–∂–∏–≥–∞—é—â–∏–π –ø–æ—Ü–µ–ª—É–π, –¥—å—è–≤–æ–ª—å—Å–∫–æ–µ –∏—Å–∫—É—à–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –ª–∏—à—å —Å–ª–∞–±—ã–µ —ç–ø–∏—Ç–µ—Ç—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ —Ö–æ—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∑—Ä—ã–≤–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞—à–µ–π –æ—Å—Ç—Ä–æ–π –ø–∏—Ü—Ü—ã. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ —Ç–æ–Ω—á–∞–π—à–µ–µ —Ç–µ—Å—Ç–æ, –æ–±–∂–∞—Ä–µ–Ω–Ω–æ–µ –¥–æ —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–∏, —Å–ª–æ–≤–Ω–æ –∫–æ–∫–æ–Ω, —Å–∫—Ä—ã–≤–∞—é—â–∏–π –≤–Ω—É—Ç—Ä–∏ –≤—É–ª–∫–∞–Ω —Å—Ç—Ä–∞—Å—Ç–µ–π. –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∏ —Ç–µ—Ä–ø–∫–∏–π, –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —è–∑—ã–∫–µ, –ø—Ä–µ–¥–≤–∞—Ä—è—è –ø—Ä–∏—Ö–æ–¥ –æ–≥–Ω–µ–Ω–Ω–æ–π —ç—Å–∫–∞–¥—Ä–∏–ª—å–∏ –ø–µ—Ä—Ü–µ–≤ —Ö–∞–ª–∞–ø–µ–Ω—å–æ –∏ —Å–µ—Ä—Ä–∞–Ω–æ.',
    "–ü–∏—Ü—Ü–∞ –°–∏—Ü–∏–ª–∏–π—Å–∫–∞—è": '–°–∏—Ü–∏–ª–∏–π—Å–∫–∞—è –ø–∏—Ü—Ü–∞, –∏–ª–∏ —Å—Ñ–∏–Ω—á–æ–Ω–µ, –∏–º–µ–µ—Ç —Ç–æ–ª—Å—Ç–æ–µ, –Ω–æ–∑–¥—Ä–µ–≤–∞—Ç–æ–µ —Ç–µ—Å—Ç–æ, –±–ª–∏–∂–µ –∫ —Ö–ª–µ–±–Ω–æ–º—É. –í –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –≥—É–±–∫–∞.',
    "–ü–∏—Ü—Ü–∞ –ú—è—Å–Ω–∞—è": '–ù–∞—Å—ã—â–µ–Ω–Ω–æ–µ –º—è—Å–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Å—ã—Ç–Ω–æ–π –ø–∏—â–∏. –ß–∞—â–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è —Å –º—è—Å–Ω—ã–º —Ñ–∞—Ä—à–µ–º, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ç—É—à–µ–Ω—ã–º —Å –æ–≤–æ—â–∞–º–∏ –∏ —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –∏ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–±–∞—Å–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ —Ñ–∞—Ä—à—É, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∏—Ü—Ü—ã –≤ –ø–µ—á—å. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Å–æ—Å—Ç–∞–≤–µ –ø–∏—Ü—Ü—ã –µ—Å—Ç—å –∏ —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–æ–º–∞—Ç—ã —á–µ—Ä—Ä–∏ –∏ –∑–µ–ª–µ–Ω–∞—è —Ä—É–∫–∫–æ–ª–∞, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å—ã–ø–∞–µ—Ç—Å—è –ø–∏—Ü—Ü–∞ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ–ª.',
    "–ü–∏—Ü—Ü–∞ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è": '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π. –ù–∞—á–∏–Ω–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∑–æ–Ω–∞: –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ç–æ–º–∞—Ç–∞–º–∏, –∏ —Å –≥—Ä–∏–±–∞–º–∏, –∏ —Å –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏, –∏ —Å–æ —Å–ø–∞—Ä–∂–µ–π –∏ –¥–∞–∂–µ —Å —Ç—ã–∫–≤–æ–π. –ò–ª–∏ —Å–æ –≤—Å–µ–º —Å—Ä–∞–∑—É.',
    "–ü–∏—Ü—Ü–∞ –ë–∏—Å–º–∞—Ä–∫": '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏ —Å —Ç–æ–º–∞—Ç–Ω–æ–≥–æ —Å–æ—É—Å–∞ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª—ã. –ù–æ –¥–∞–ª—å—à–µ –∫ –Ω–∏–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –≤–µ—Ç—á–∏–Ω–∞, –±–µ–∫–æ–Ω, –∂–∞—Ä–µ–Ω–æ–µ —è–π—Ü–æ –∏ –∏–Ω–æ–≥–¥–∞ —Ñ–∞—Å–æ–ª—å.',
    "–ü–∏—Ü—Ü–∞ –° –õ–æ—Å–æ—Å–µ–º": '–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å –Ω–µ–∂–Ω—ã–º —Ñ–∏–ª–µ –ª–æ—Å–æ—Å—è, —Å–ª–∏–≤–æ—á–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ —Å–≤–µ–∂–∏–º —É–∫—Ä–æ–ø–æ–º. –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–ª–∞—Å—Å–∏–∫–∏.'
}

# –°–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
pizza_images = {
    "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": 'Margarita.webp',
    "–ü–∏—Ü—Ü–∞ 4–°—ã—Ä–∞": '4Chesee.jpg',
    "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": 'Pepperoni.jpg',
    "–ü–∏—Ü—Ü–∞ –§–µ–º–±–æ–π—á–∏–∫": 'Femboy.png',
    "–ü–∏—Ü—Ü–∞ –° –ü–µ—Ä—Ü–µ–º –•–∞–ª–∞–ø–µ–Ω—å—é": 'Spicy.webp',
    "–ü–∏—Ü—Ü–∞ –°–∏—Ü–∏–ª–∏–π—Å–∫–∞—è": 'Sicilia.jpg',
    "–ü–∏—Ü—Ü–∞ –ú—è—Å–Ω–∞—è": 'Beef.webp',
    "–ü–∏—Ü—Ü–∞ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è": 'Vegan.jpg',
    "–ü–∏—Ü—Ü–∞ –ë–∏—Å–º–∞—Ä–∫": 'Bismark.jpg',
    "–ü–∏—Ü—Ü–∞ –° –õ–æ—Å–æ—Å–µ–º": 'Fish.webp'
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø–∏—Ü—Ü—ã
PIZZA_PRICES = {
    "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": 450,
    "–ü–∏—Ü—Ü–∞ 4–°—ã—Ä–∞": 600,
    "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": 550,
    "–ü–∏—Ü—Ü–∞ –§–µ–º–±–æ–π—á–∏–∫": 500,
    "–ü–∏—Ü—Ü–∞ –° –ü–µ—Ä—Ü–µ–º –•–∞–ª–∞–ø–µ–Ω—å—é": 520,
    "–ü–∏—Ü—Ü–∞ –°–∏—Ü–∏–ª–∏–π—Å–∫–∞—è": 580,
    "–ü–∏—Ü—Ü–∞ –ú—è—Å–Ω–∞—è": 650,
    "–ü–∏—Ü—Ü–∞ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è": 480,
    "–ü–∏—Ü—Ü–∞ –ë–∏—Å–º–∞—Ä–∫": 570,
    "–ü–∏—Ü—Ü–∞ –° –õ–æ—Å–æ—Å–µ–º": 700
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_price(price: int) -> str:
    return f"{price:,}".replace(',', ' ') + " ‚ÇΩ"

def get_delivery_time() -> str:
    return f"{Config.DELIVERY_TIME}-{Config.DELIVERY_TIME + 15}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–∏—Ü—Ü–∞–º–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    pizza_buttons = [
        InlineKeyboardButton(
            text=f"{name} ‚Ä¢ {format_price(PIZZA_PRICES[name])}",
            callback_data=f"pizza_{name}"
        ) for name in PIZZA_PRICES.keys()
    ]
    
    for i in range(0, len(pizza_buttons), 2):
        row = pizza_buttons[i:i + 2]
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        [
            InlineKeyboardButton(text=Buttons.CART, callback_data='view_cart'),
            InlineKeyboardButton(text=Buttons.CLEAR_CART, callback_data='clear_cart')
        ],
        [
            InlineKeyboardButton(text=Buttons.PAY, callback_data='pay'),
            InlineKeyboardButton(text=Buttons.HELP, callback_data='help')
        ]
    ]
    buttons.extend(control_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–ø–ª–∞—Ç—ã
def get_payment_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=Buttons.CONFIRM_PAYMENT, callback_data='confirm_payment'),
                InlineKeyboardButton(text=Buttons.RETURN_TO_MENU, callback_data='return_to_menu')
            ]
        ]
    )

def get_remove_item_keyboard(order: Order) -> InlineKeyboardMarkup:
    buttons = []
    for i, item in enumerate(order.items):
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item}",
                callback_data=f"remove_{i}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(text=Buttons.RETURN_TO_MENU, callback_data='return_to_menu')
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command('start'))
async def send_welcome(message: Message) -> None:
    try:
        user_id = message.from_user.id
        if user_id not in orders:
            orders[user_id] = Order(user_id)
        
        keyboard = get_main_keyboard()
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏—Ü—Ü–µ—Ä–∏—é!\n\n"
            "üçï –£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã–µ –≤–∫—É—Å–Ω—ã–µ –ø–∏—Ü—Ü—ã.\n"
            "üõí –î–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.\n"
            "üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {get_delivery_time()} –º–∏–Ω—É—Ç.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




# –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

@dp.message(Command("admin"))
async def admin_panel(message: types.Message): 
    "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    print(f"–¢–µ–∫—É—â–∏–π User ID: {message.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    print(f"ADMIN IDS: {Config.ADMIN_IDS}")  # –û—Ç–ª–∞–¥–∫–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ –∫–ª–∞—Å—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    if message.from_user.id not in Config.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", callback_data="startpizza")],
            [InlineKeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –≤—ã–µ–∑–¥–µ –∫—É—Ä—å–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É", callback_data="devilery")],
            [InlineKeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫—É—Ä—å–µ—Ä–∞", callback_data="devileryhome")],
        ]
    )
    await message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
@dp.message(Command("menu"))
async def show_menu(message: Message) -> None:
    try:
        keyboard = get_main_keyboard()
        await message.answer(
            'üçï <b>–ú–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é:',
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == 'help')
async def show_help(callback: CallbackQuery) -> None:
    try:
        help_text = (
            "üçï <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é\n"
            "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
            "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –≤ –∫–æ—Ä–∑–∏–Ω–µ\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã\n"
            "5Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É\n"
            "6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support"
        )
        keyboard = get_main_keyboard()
        await callback.message.edit_text(help_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == 'return_to_menu')
async def return_to_menu(callback: CallbackQuery) -> None:
    try:
        keyboard = get_main_keyboard()
        await callback.message.edit_text(
            'üçï –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é:',
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data == 'view_cart')
async def handle_view_cart(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        if user_id not in orders or not orders[user_id].items:
            await callback.answer('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.', show_alert=True)
            return

        order = orders[user_id]
        keyboard = get_remove_item_keyboard(order)
        await callback.message.edit_text(
            order.get_order_summary(),
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == 'pay')
async def handle_payment(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        if user_id not in orders or not orders[user_id].items:
            await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        order = orders[user_id]
        if not order.can_checkout():
            await callback.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {format_price(Config.MIN_ORDER_AMOUNT)}",
                show_alert=True
            )
            return

        keyboard = get_payment_keyboard()
        await callback.message.edit_text(
            f"{order.get_order_summary()}\n\n"
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            f"<code>{Config.CARD_NUMBER}</code>\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == 'confirm_payment')
async def handle_payment_confirmation(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        if user_id in orders:
            orders[user_id].confirm_payment()
        keyboard = get_main_keyboard()
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
            "üïí –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 45-60 –º–∏–Ω—É—Ç.\n"
            "üçï –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
            reply_markup=keyboard
        )
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data.in_(['view_cart', 'clear_cart']))
async def handle_cart_commands(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        if callback.data == 'view_cart':
            if user_id in orders and orders[user_id].items:
                cart_items = []
                total_price = orders[user_id].total_price
                for i, item in enumerate(orders[user_id].items, 1):
                    price = PIZZA_PRICES.get(item, 0)
                    cart_items.append(f"{i}. {item} - {price} —Ä—É–±.")

                cart_text = "\n".join(cart_items)
                await callback.message.edit_text(
                    f'üõí –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_text}\n\n'
                    f'üì¶ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(orders[user_id].items)}\n'
                    f'üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.',
                    reply_markup=get_main_keyboard()
                )
            else:
                await callback.answer('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.', show_alert=True)
        elif callback.data == 'clear_cart':
            orders[user_id].clear()
            await callback.answer('üóë –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.')
            await callback.message.edit_text(
                'üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:',
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data.startswith('pizza_'))
async def handle_pizza_selection(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        pizza_name = callback.data.replace('pizza_', '')

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—É –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in orders:
            orders[user_id] = Order(user_id)
        orders[user_id].add_item(pizza_name)
        
        price = PIZZA_PRICES.get(pizza_name, 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ü—Ü–µ
        await callback.message.answer(
            f'‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ "{pizza_name}" ({price} —Ä—É–±.) –≤ –∫–æ—Ä–∑–∏–Ω—É.\n\n'
            f"‚ÑπÔ∏è {pizza_descriptions[pizza_name]}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–∏—Ü—Ü—ã
        photo_path = os.path.join(Config.IMAGES_PATH, pizza_images[pizza_name])
        try:
            if os.path.exists(photo_path):
                photo = FSInputFile(photo_path)
                await callback.message.answer_photo(
                    photo,
                    caption=f"üçï {pizza_name}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.",
                    reply_markup=get_main_keyboard()
                )
            else:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
                await callback.message.answer(
                    "üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=get_main_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                reply_markup=get_main_keyboard()
            )
        
        await callback.answer(f"‚úÖ {pizza_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data.startswith('remove_'))
async def handle_remove_item(callback: CallbackQuery) -> None:
    try:
        user_id = callback.from_user.id
        if user_id not in orders:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        index = int(callback.data.replace('remove_', ''))
        order = orders[user_id]
        
        if order.remove_item(index):
            if order.items:
                keyboard = get_remove_item_keyboard(order)
                await callback.message.edit_text(
                    order.get_order_summary(),
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                    reply_markup=get_main_keyboard()
                )
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message()
async def unknown_message(message: Message) -> None:
    try:
        await message.answer(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–∞.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main() -> None:
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            skip_updates=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
